openapi: 3.0.3
info:
  title: Berry Buddy API
  version: "0.1.0"
servers:
  - url: http://localhost:5000
tags:
  - name: Health
  - name: Profiles
  - name: Berries
  - name: Vendors
  - name: Prices
  - name: Reviews
  - name: Photos
  - name: Auth
paths:
  /health:
    get:
      operationId: healthCheck
      tags: [Health]
      summary: Health check (no auth)
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  now: { type: string, format: date-time }
  /auth/otp/start:
    post:
      operationId: authOtpStart
      tags: [Auth]
      summary: Start email code OTP (no auth)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OTPStartRequest' }
      responses:
        '200':
          description: Code sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
  /auth/otp/verify:
    post:
      operationId: authOtpVerify
      tags: [Auth]
      summary: Verify email code and return session (no auth)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OTPVerifyRequest' }
      responses:
        '200':
          description: Session created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthSession' }
  /profiles/me:
    get:
      operationId: profilesMeGet
      tags: [Profiles]
      summary: Get my profile
      responses:
        '200':
          description: Profile found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AppProfile' }
        '404':
          $ref: '#/components/responses/NotFound'
  /profiles:
    get:
      operationId: profilesByIds
      tags: [Profiles]
      summary: Get profiles by comma-separated IDs
      security: []
      parameters:
        - name: ids
          in: query
          required: true
          schema:
            type: string
          description: Comma-separated list of user IDs (UUIDs)
      responses:
        '200':
          description: Array of profiles
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AppProfile' }
    put:
      operationId: profilesMePut
      tags: [Profiles]
      summary: Upsert my profile
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                display_name: { type: string, minLength: 1, maxLength: 120 }
                location_city: { type: string }
                location_state: { type: string }
      responses:
        '200':
          description: Upserted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AppProfile' }
  /berries:
    get:
      operationId: berriesList
      tags: [Berries]
      summary: List berries
      security: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Array of berries
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Berry' }
    post:
      operationId: berriesCreate
      tags: [Berries]
      summary: Create berry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [berry_name]
              properties:
                berry_name: { type: string, minLength: 1, maxLength: 100 }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Berry' }
  /berries/{id}:
    get:
      operationId: berriesGet
      tags: [Berries]
      summary: Get berry by id
      security: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Berry' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      operationId: berriesUpdate
      tags: [Berries]
      summary: Update berry
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                berry_name: { type: string, minLength: 1, maxLength: 100 }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Berry' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      operationId: berriesDelete
      tags: [Berries]
      summary: Delete berry
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Berry' }
        '404': { $ref: '#/components/responses/NotFound' }
  /vendors:
    get:
      operationId: vendorsList
      tags: [Vendors]
      summary: List vendors
      security: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - name: berry_id
          in: query
          required: false
          schema: { type: string, format: uuid }
          description: Filter vendors that have prices for the specified berry
      responses:
        '200':
          description: Array of vendors
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Vendor' }
    post:
      operationId: vendorsCreate
      tags: [Vendors]
      summary: Create vendor
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/VendorCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Vendor' }
  /vendors/{id}:
    get:
      operationId: vendorsGet
      tags: [Vendors]
      summary: Get vendor by id
      security: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Vendor' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      operationId: vendorsUpdate
      tags: [Vendors]
      summary: Update vendor
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/VendorUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Vendor' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      operationId: vendorsDelete
      tags: [Vendors]
      summary: Delete vendor
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Vendor' }
        '404': { $ref: '#/components/responses/NotFound' }
  /prices:
    get:
      operationId: pricesList
      tags: [Prices]
      summary: List prices
      security: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Array of prices
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Price' }
    post:
      operationId: pricesCreate
      tags: [Prices]
      summary: Create price (reported_by = current user)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PriceCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Price' }
  /prices/{id}:
    patch:
      operationId: pricesUpdate
      tags: [Prices]
      summary: Update price (owner-only)
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PriceUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Price' }
        '404':
          description: Not found or not owner
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    delete:
      operationId: pricesDelete
      tags: [Prices]
      summary: Delete price (owner-only)
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Price' }
        '404':
          description: Not found or not owner
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  /reviews:
    get:
      operationId: reviewsList
      tags: [Reviews]
      summary: List reviews
      security: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Array of reviews
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Review' }
    post:
      operationId: reviewsCreate
      tags: [Reviews]
      summary: Create review (reported_by = current user)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReviewCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Review' }
  /reviews/{id}:
    patch:
      operationId: reviewsUpdate
      tags: [Reviews]
      summary: Update review (owner-only)
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReviewUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Review' }
        '404':
          description: Not found or not owner
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    delete:
      operationId: reviewsDelete
      tags: [Reviews]
      summary: Delete review (owner-only)
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Review' }
        '404':
          description: Not found or not owner
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  /photos:
    get:
      operationId: photosList
      tags: [Photos]
      summary: List photos
      security: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Array of photos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Photo' }
    post:
      operationId: photosCreate
      tags: [Photos]
      summary: Create photo (uploaded_by = current user)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PhotoCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Photo' }
  /photos/{id}:
    patch:
      operationId: photosUpdate
      tags: [Photos]
      summary: Update photo (owner-only)
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PhotoUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Photo' }
        '404':
          description: Not found or not owner
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    delete:
      operationId: photosDelete
      tags: [Photos]
      summary: Delete photo (owner-only)
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Photo' }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    Limit:
      name: limit
      in: query
      schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
      description: Page size
    Offset:
      name: offset
      in: query
      schema: { type: integer, minimum: 0, default: 0 }
      description: Offset for pagination
    IdParam:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
  schemas:
    Error:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
    OTPStartRequest:
      type: object
      required: [email]
      properties:
        email: { type: string, format: email }
        create_if_missing: { type: boolean, description: 'Defaults to true' }
    OTPVerifyRequest:
      type: object
      required: [email, token]
      properties:
        email: { type: string, format: email }
        token: { type: string, minLength: 4, maxLength: 12 }
    AuthSession:
      type: object
      properties:
        session:
          type: object
          properties:
            access_token: { type: string }
            token_type: { type: string }
            expires_in: { type: integer }
        user:
          type: object
    AppProfile:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string, format: email, nullable: true }
        display_name: { type: string, nullable: true }
        location_city: { type: string, nullable: true }
        location_state: { type: string, nullable: true }
        created_at: { type: string, format: date-time, nullable: true }
        updated_at: { type: string, format: date-time, nullable: true }
    Berry:
      type: object
      properties:
        berry_id: { type: string, format: uuid }
        berry_name: { type: string }
        created_at: { type: string, format: date-time, nullable: true }
    Vendor:
      type: object
      properties:
        vendor_id: { type: string, format: uuid }
        vendor_name: { type: string }
        vendor_type:
          type: string
          enum: [supermarket, farmers_market, fruit_stand, other]
        address: { type: string, nullable: true }
        city: { type: string, nullable: true }
        state: { type: string, nullable: true }
        zip_code: { type: string, nullable: true }
        latitude: { type: number, nullable: true }
        longitude: { type: number, nullable: true }
        created_at: { type: string, format: date-time, nullable: true }
        updated_at: { type: string, format: date-time, nullable: true }
    VendorCreate:
      type: object
      required: [vendor_name, vendor_type]
      properties:
        vendor_name: { type: string, minLength: 1, maxLength: 200 }
        vendor_type:
          type: string
          enum: [supermarket, farmers_market, fruit_stand, other]
        address: { type: string }
        city: { type: string }
        state: { type: string }
        zip_code: { type: string }
        latitude: { type: number }
        longitude: { type: number }
    VendorUpdate:
      allOf:
        - $ref: '#/components/schemas/VendorCreate'
      description: All fields optional
    Price:
      type: object
      properties:
        price_id: { type: string, format: uuid }
        vendor_id: { type: string, format: uuid }
        berry_id: { type: string, format: uuid }
        reported_by: { type: string, format: uuid }
        price_per_unit: { type: number }
        unit_type:
          type: string
          enum: [pound, kg, pint, quart, container, each]
        reported_at: { type: string, format: date-time, nullable: true }
        created_at: { type: string, format: date-time, nullable: true }
    PriceCreate:
      type: object
      required: [vendor_id, berry_id, price_per_unit, unit_type]
      properties:
        vendor_id: { type: string, format: uuid }
        berry_id: { type: string, format: uuid }
        price_per_unit: { type: number, minimum: 0 }
        unit_type:
          type: string
          enum: [pound, kg, pint, quart, container, each]
        reported_at: { type: string, format: date-time }
    PriceUpdate:
      type: object
      properties:
        price_per_unit: { type: number, minimum: 0 }
        unit_type:
          type: string
          enum: [pound, kg, pint, quart, container, each]
        reported_at: { type: string, format: date-time }
    Review:
      type: object
      properties:
        review_id: { type: string, format: uuid }
        vendor_id: { type: string, format: uuid }
        berry_id: { type: string, format: uuid }
        reported_by: { type: string, format: uuid }
        rating: { type: integer, minimum: 1, maximum: 5 }
        quality_rating: { type: integer, minimum: 1, maximum: 5, nullable: true }
        freshness_rating: { type: integer, minimum: 1, maximum: 5, nullable: true }
        value_rating: { type: integer, minimum: 1, maximum: 5, nullable: true }
        review_text: { type: string, nullable: true }
        visited_date: { type: string, format: date }
        created_at: { type: string, format: date-time, nullable: true }
    ReviewCreate:
      type: object
      required: [vendor_id, berry_id, rating]
      properties:
        vendor_id: { type: string, format: uuid }
        berry_id: { type: string, format: uuid }
        rating: { type: integer, minimum: 1, maximum: 5 }
        quality_rating: { type: integer, minimum: 1, maximum: 5 }
        freshness_rating: { type: integer, minimum: 1, maximum: 5 }
        value_rating: { type: integer, minimum: 1, maximum: 5 }
        review_text: { type: string }
        visited_date: { type: string, format: date }
    ReviewUpdate:
      allOf:
        - $ref: '#/components/schemas/ReviewCreate'
      description: All fields optional
    Photo:
      type: object
      properties:
        photo_id: { type: string, format: uuid }
        review_id: { type: string, format: uuid, nullable: true }
        vendor_id: { type: string, format: uuid, nullable: true }
        berry_id: { type: string, format: uuid, nullable: true }
        uploaded_by: { type: string, format: uuid }
        photo_url: { type: string, format: uri }
        thumbnail: { type: string, format: uri, nullable: true }
        caption: { type: string, nullable: true }
        uploaded_at: { type: string, format: date-time, nullable: true }
    PhotoCreate:
      type: object
      required: [photo_url]
      properties:
        review_id: { type: string, format: uuid, nullable: true }
        vendor_id: { type: string, format: uuid }
        berry_id: { type: string, format: uuid }
        photo_url: { type: string, format: uri }
        thumbnail: { type: string, format: uri }
        caption: { type: string }
    PhotoUpdate:
      allOf:
        - $ref: '#/components/schemas/PhotoCreate'
      description: All fields optional
security:
  - bearerAuth: []
